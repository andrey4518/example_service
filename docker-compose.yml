version: '3'
x-example-service-common:
  &example-service-common
  environment:
    &example-service-common-env
    POSTGRES_USER: example
    POSTGRES_PASSWORD: example
    POSTGRES_DB: example
    KAFKA_URL: kafka:9092
    OBJECT_CREATION_TOPIC_NAME: object_creation_topic
    MOVIE_CREATION_TOPIC_NAME: movie_creation_topic
    API_URL: http://api:8080/api/v1

services:
  postgres:
    image: postgres:13
    ports:
      - 15432:5432
    environment:
      <<: *example-service-common-env
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "example"]
      interval: 5s
      retries: 5
    restart: always
    depends_on:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: api.service

  api:
    build: service_api/.
    environment:
      <<: *example-service-common-env
      POSTGRES_PORT: 5432
      POSTGRES_HOST: postgres
    ports:
      - 8081:8080
    depends_on:
      - postgres
      - kafka
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: api.service

  activity_generator_service:
    build: activity_generator_service/.
    ports:
      - 8082:8000
    restart: always
    depends_on:
      - api
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: activity_generator.service

  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    depends_on:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: zookeeper

  kafka:
    image: docker.io/bitnami/kafka:3.2
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: kafka

  detailed_info_scraper_service:
    build: detailed_info_scraper_service/.
    restart: always
    environment:
      <<: *example-service-common-env
      PYTHONUNBUFFERED: 1
    depends_on:
      - api
      - kafka
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: detailed_info_scraper.service

  nifi:
    image: apache/nifi:1.17.0
    ports:
      - 8443:8443
      - 8083:8080
    environment:
      SINGLE_USER_CREDENTIALS_USERNAME: nifi
      SINGLE_USER_CREDENTIALS_PASSWORD: nifi123456789
      NIFI_WEB_HTTP_HOST: '0.0.0.0'
      NIFI_WEB_HTTP_PORT: '8080'
      NIFI_WEB_HTTPS_HOST: 
      NIFI_WEB_HTTPS_PORT: 
    depends_on:
      - kafka
      - postgres
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: nifi

  nifi-registry:
    image: apache/nifi-registry:1.17.0
    ports:
      - 18080:18080
    volumes:
      - ${NIFI_REGISTRY_PROVIDERS_CONF:-./nifi_registry/providers.xml}:/opt/nifi-registry/nifi-registry-current/conf/providers.xml
    depends_on:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: nifi-reg

  nifi-init:
    build: nifi_init/.
    environment:
      <<: *example-service-common-env
      PYTHONUNBUFFERED: 1
    depends_on:
      - nifi
      - nifi-registry
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: nifi-init

  fluentd:
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    depends_on:
      - namenode

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode_vol:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop/hadoop.env

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    ports:
      - 9864:9864
    volumes:
      - hadoop_datanode_vol:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop/hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864"
    env_file:
      - ./hadoop/hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop/hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver_vol:/hadoop/yarn/timeline
    env_file:
      - ./hadoop/hadoop.env

volumes:
  postgres-db-volume:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  hadoop_namenode_vol:
  hadoop_datanode_vol:
  hadoop_historyserver_vol:
